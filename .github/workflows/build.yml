name: rust build & release

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}
    strategy:
          matrix:
            include:
              - build: linux
                os: ubuntu-latest
                target: x86_64-unknown-linux-musl

              - build: macos
                os: macos-latest
                target: x86_64-apple-darwin

              - build: windows-gnu
                os: windows-latest
                target: x86_64-pc-windows-gnu
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }} --no-default-features

      - name: Build archive
        shell: bash
        run: |
          binary_name="bevy-dynamic"

          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - uses: ncipollo/release-action@v1
        with:
          name: "Latest Push Compiled"
          makeLatest: true
          allowUpdates: true
          tag: "latest"
          artifacts: $ {{ env.ASSET }}
